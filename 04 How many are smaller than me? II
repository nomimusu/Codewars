#1 二分法
class SortedList {
  constructor() {
    this.list = [];
  }

  insert(value) {
    //right = this.list.length 而不是 this.list.length-1, 是因为mid = Math.floor((left+right)/2), 当length = 3，5，7等奇数时，mid等于1，2，3；list[1], list[2], list[3]刚好正中间那个元素
    //当length = 4,6,8等偶数时，mid等于2，3，4；list[2],list[3],list[4]是正中间两个元素中靠右的那个元素
    let left = 0,
      right = this.list.length;

    while (left < right) {
      let mid = Math.floor((left + right) / 2);
      if (this.list[mid] < value) {
        //说明这个值的范围是list[mid+1] ----- lsit[right-1]之间
        left = mid + 1;
      } else {
        //说明这个值的范围在list[left] ----- list[mid]
        right = mid;
      }
    }
    //以上while循环会最终出现list[left]，list[mid], list[right]这种情况(list[left], list[left+1], list[mid], list[right] 到下一步)
    //情况一：list[left], list[left+1], list[mid], list[right]
    // 如果value > list[mid], 那么value就要插入到index为right的这个位置；当value > list[mid], left = mid + 1正好等于right, this.list.splice(left,0,value)就把value插入到了inex为right的位置
    // 如果value <= list[mid], right = mid, 则变成list[left], list[mid],list[right] ，如果list[mid]<value, value就要插入到index为right的位置，其余部分参考上；如果list[mid] >= value, right = mid, list[left], list[right]
    // 此时list[mid]就是list[left], 如果value > list[left], value就要插入到index为right的位置，其余部分参考上；如果value <= list[left], 这种情况下value就是等于list[left], 把value插入到index为left的位置即可

    //这里的left相当于元素value的index
    this.list.splice(left, 0, value);
  }

  countSmaller(value) {
    let left = 0,
      right = this.list.length;
    while (left < right) {
      let mid = Math.floor((left + right) / 2);
      if (this.list[mid] < value) {
        left = mid + 1;
      } else {
        right = mid;
      }
    }

    //left是元素的index，因为list是有序的，所以inex也代表着比该元素小的元素数目
    return left;
  }
}

const smaller = nums => {
  let result = [];
  const sortedList = new SortedList();

  for (let i = nums.length - 1; i >= 0; i--) {
    result[i] = sortedList.countSmaller(nums[i]);
    sortedList.insert(nums[i]);
  }

  return result;
};

#2 时间复杂度为O(n)
const smaller = nums => nums.map((x,i) => nums.slice(i+1).filter( y => y < x).length);

#二叉搜索树
class TreeNode{
  constructor(val){
    this.val = val; //val为该节点的值
    this.count = 0; //count为左子树节点，即比该节点小的节点的数量
    this.left = null; //左子节点
    this.right = null;//右子节点
    this.dup = 1;//二叉树该数字出现的次数
  }
}

function insertNode(root,num){
  //count存储比该节点小的节点数量
  let count = 0;
 
  while(true){
  //num与root的值有三种大小关系：大于、小于、等于
  if(num < root.val){
    //root的左子树节点增加1
    root.count++;
    //判断root的左子节点是否为null，为null，num成为左子节点，不为null,左子节点成为root，再查询一遍，直到num成为一个左/右子节点
    if(!root.left){
      root.left = new TreeNode(num);
      break;
    }else{
      root = root.left;
    } 
  }else if(num > root.val){
    //num大于root节点和root节点的左子树节点
    count += root.count + root.dup;
    //判断root节点的右子节点是否为null，为null,num成为右子节点，不为null，num成为root，再查询一遍，直到num成为左/右子节点
    if(!root.right){
      root.right = new TreeNode(num);
      break;
    }else{
      root = root.right;
    }
  } else{
    //root的值与num相等
    root.dup++;
    count += root.count;
    break;
  }
    
  }
  
  return count;
}

function smaller(nums) {
   //判断数组是否为合法值或者空数组
  if(!nums || nums.length === 0) return [];
  
  //创建result数组，长度为n，元素类型为undefined, 用于存储每个位置上的结果
  const n = nums.length;
  let result = new Array(n);
  result[n-1] = 0;
  //因为是计算元素右边比它小的元素的数量，所以root选择最右边的元素
  let root = new TreeNode(nums[n-1]);
  
  for(let i = n-2;i >= 0;i--){
    result[i] = insertNode(root,nums[i]);
  }
  
  return result;
}
