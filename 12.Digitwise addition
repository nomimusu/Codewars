function digitwiseAddition(N, K) {
  // Test Constraints:
  // 1 <= n <= 10 ** 9
  // 1 <= k <= 10 ** 5
  const mod = 10**9 + 7;
  const digits = new Array(10).fill(0);
  N.toString().split('').forEach(e => digits[Number(e)]++);
  
  for(let i = 0; i<K;i++){
    //index依次为0,9,8,7,6,5,4,3,2,1的循环
    let index = (10 - i%10)%10;
    // (index+9)%10恰好比index小1
    //迭代第一次,digits[0] = digits[0] + digits[9]。第一次迭代，数字9进位成10，是2位，1位的数量在9，1位的数量在0
    //迭代第二次,digits[9] = digits[9] + digits[8]。第二次迭代，数字8进位成10，是2位，1位的数量在8，1位的数量在9
    digits[index] = (digits[index] + digits[(index+9)%10]) % mod;
  }
  
  return digits.reduce((acc,e) => (acc+e)%mod,0 );
}

//遗留问题为什么只有当K=10的时候，digits数组中(0-9)的数量才会跟N中(0-9)的数量相等
// 迭代10次，(0-9)依次变为
// 0 => 10
// 1 => 21
// 2 => 32
// 3 => 43
// 4 => 54
// 5 => 65
// 6 => 76
// 7 => 87
// 8 => 98
// 9 => 109
// digits[0] = digits[0] + digits[9], digits[0]来源于0 => 10 中的0, digits[9]来源于9 => 109中的0 【109和10的0数量被计算，109还剩1和9，10还剩1】 
// digits[9] = digits[9] + digits[8], digits[9]来源于9 => 109 中的9, digits[8]来源于8 => 98中的9 【109和98的9数量被计算，109还剩1，98还剩8】 
// digits[8] = digits[8] + digits[7], digits[8]来源于8 => 98 中的8, digits[7]来源于7 => 87中的8  【98和87的8数量被计算，98计算完毕，87还剩7】 
// digits[7] = digits[7] + digits[6], digits[7]来源于7 => 87 中的7, digits[6]来源于6 => 76中的7  【87和76的7数量被计算，87计算完毕，76还剩6】 
// digits[6] = digits[6] + digits[5], digits[6]来源于6 => 76 中的6, digits[5]来源于5 => 65中的6  【76计算完毕】
// digits[5] = digits[5] + digits[4], digits[5]来源于5 => 65 中的5, digits[4]来源于4 => 54中的5  【65计算完毕】
// digits[4] = digits[4] + digits[3], digits[4]来源于4 => 54 中的4, digits[3]来源于3 => 43中的4  【54计算完毕】
// digits[3] = digits[3] + digits[2], digits[3]来源于3 => 43 中的3, digits[2]来源于2 => 32中的3  【43计算完毕】
// digits[2] = digits[2] + digits[1], digits[2]来源于2 => 32 中的2, digits[1]来源于1 => 21中的2  【32计算完毕】
// digits[1] = digits[1] + digits[0], digits[1]来源于1 => 21 中的1, digits[0]来源于0 => 10中的1，这个1还包含了109中的1，因为在第一次迭代中就把digits[9]数量加到了digits[0] 【21计算完毕】【10计算完毕】【109计算完毕】
// 迭代10次之后，数字(0-9)所产生的数字，就会全部被计算到digits数组(0-9)的数量当中

